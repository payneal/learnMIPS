Question #1
Say that you need to get a plate from a stack of dinner plates. Which one do you normally get?

top 

QUESTION 2:
Which plate is the last one that was added to the stack? Which plate will be the first one removed?

top, top

Question 3: 
If an item of data (say the value 103) is added to the stack, where will it go?
after 81, would put it on the top

Question 4: 
In the new stack (shown above) if one item is removed, which will it be?
103 

Question 5: 
When a software stack is popped, does the popped item remain in memory?

yes

Question 6: 
# Evaluate the expression ab - 12a + 18b - 7

main:   
        lw      $t0,a          # get a
        lw      $t1,bb         # get b
        mul     $t0,$t0,$t1    # a*b
        
        subu    $sp,$sp,____
  # push a*b onto stack
        
        sw      $t0,______


        . . . . .

        .data
a:      2
bb:     3

4, sb

Question 7:
Fill in the blanks to pop the 18b term.
# Evaluate the expression ab - 12a + 18b - 7

        .globl  main
        lw      $t0,a          # get a
        lw      $t1,bb         # get b
        mul     $t0,$t0,$t1    # a*b
        subu    $sp,$sp,4      # push a*b onto stack
        sw      $t0,($sp)
        
        lw      $t0,a          # get a
        li      $t1,-12        # 
        mul     $t0,$t0,$t1    # -12a
        subu    $sp,$sp,4      # push -12a onto stack
        sw      $t0,($sp)
        
        lw      $t0,bb         # get b
        li      $t1,18         # 
        mul     $t0,$t0,$t1    # 18b
        subu    $sp,$sp,4      # push 18b onto stack
        sw      $t0,($sp)

        li      $t1,-7         # init sum to -7
        
        lw      $t0,____       # pop 18b
        
        addu    $sp,$sp,____

        addu    $t1,$t1,$t0    # 18b -7

($sp), 4 

Question 8:
(Thought Question:) Is it possible to run out of memory if too many things are pushed onto the stack?
yes

Question 9: 
Which segment is for the machine instructions?

the text segment 

Question 10
(Review: ) What does the following instruction do? lbu $t0,string

loads one bye of adress sting to $t0

Question 11
Fill the blanks with the correct phrases. (You can do this by using your mouse with copy and paste from the Edit menu of the browser.)

Here is the outline of the program. The comments show the major sections of the program.

        .text
        .globl  main
main:  
        1.)
        2.)
        3.)
        4.)

        .data
str:    .space  128     # character buffer            
Not much of an outline. Luckily, here are some phrases you can use to fill in the blanks:

4- print the reversed string
2- push each character onto the stack
1- input the string into a buffer
3- pop chars from stack back into the buffer


Question 12
Fill in the blanks of the program.

# Reverse and output a user-supplied string
#
# Settings: Load delays OFF; Branch delays OFF,
#           Trap file    ON; Pseudoinstructions ON   
#
# $t0 --- character pushed or popped
# $t1 --- index into string buffer str

        .text
        .globl  main

main:   #input the string
        li      $v0,8          # service code
        la      $a0,str        # address of buffer
        li      $a1,128        # buffer length 
        syscall       
                               # initialize the stack:        
        li      $t0,___        # push a null
         
        ____    $sp,$sp,4      # onto the stack
        
        sw      $t0,(___)      # to signal its bottom
        li      $t1,0          # index of first char in str buffer

        # push each character onto the stack
        # pop chars from stack back into the buffer
        # print the reversed string

        .data
str:    .space  128            # character buffer            

0, subu, $sp


Question 13
Fill in the blanks.

beqz, sw, pushl

Question 14
You know the drill: fill in those blanks.
lw, addu, ab

Question 15
Would it be easier to do this program with arrays?

no, not reversing a string

key terms: 
- Concept of stack
    A stack is a way of organizing data in memory. Data items are visualized as behaving like a stack of physical items. Often a stack is visualized as behaving like a stack of dinner plates. Data are added and removed from the stack data structure in a way analogous to placing plates on the stack of plates and removing them.

- LIFO data structure.
    Last In First Out.

- Stack pointer register and upside-down MIPS stack.
    The stack pointer register $sp by convention points at the top item of the stack. The stack pointer is register $29. The mnemonic register name $sp is used by the extended assembler.

In the usual way of drawing memory the stack is upside-down. In the picture, the top item of the stack is 81. The bottom of the stack contains the integer -92.

- Push
To push an item onto the stack, first subtract 4 from the stack pointer, then store the item at the address in the stack pointer.
Here is what that looks like in code. Say that the value to push on the stack is in register $t0:

- Pop
To pop the top item from a stack, copy the item pointed at by the stack pointer, then add 4 to the stack pointer.
Here is what that looks like in code. Say that we want the value to be popped into $t0:

- Run-time stack
There is a finite amount of memory, even in the best computer systems. So it is possible to push more words than there are words of memory. Usually this would be the result of an infinite loop because when a program is first entered the operating system gives it space for a very large stack.

The picture shows how a typical operating system arranges memory when a program starts. There are four gigabytes of (virtual) memory available in total. The section of memory from 0x10000000 to 0x7FFFFFFF is available for the data segment and the stack segment. This is 1.8 Gigabytes of space.

When the program is started the stack pointer ($sp) is initialized to 0x7FFFFFFC (the address of the last fullword of user memory). As the program runs, the stack grows downward into the available space. The data segment grows upward as the program runs. (This is the subject of chapter 33.)

In a dynamic program, the segments grow and shrink. If the combined size of the segments exceeds the available space their boundaries will meet somewhere in the middle of the range. When this happens there is no memory left.

- Text segment of MIPS memory.
raditionally a segment containing machine instructions is called "text". A process is when the processor is actively executing those machine instructions. (This is analogous to the phrase "text of a play" and "performance of a play").




